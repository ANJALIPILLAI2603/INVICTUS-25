{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar motionUtils = require('motion-utils');\nconst supportsScrollTimeline = motionUtils.memo(() => window.ScrollTimeline !== undefined);\nclass BaseGroupPlaybackControls {\n  constructor(animations) {\n    // Bound to accomodate common `return animation.stop` pattern\n    this.stop = () => this.runAll(\"stop\");\n    this.animations = animations.filter(Boolean);\n  }\n  get finished() {\n    // Support for new finished Promise and legacy thennable API\n    return Promise.all(this.animations.map(animation => \"finished\" in animation ? animation.finished : animation));\n  }\n  /**\n   * TODO: Filter out cancelled or stopped animations before returning\n   */\n  getAll(propName) {\n    return this.animations[0][propName];\n  }\n  setAll(propName, newValue) {\n    for (let i = 0; i < this.animations.length; i++) {\n      this.animations[i][propName] = newValue;\n    }\n  }\n  attachTimeline(timeline, fallback) {\n    const subscriptions = this.animations.map(animation => {\n      if (supportsScrollTimeline() && animation.attachTimeline) {\n        return animation.attachTimeline(timeline);\n      } else if (typeof fallback === \"function\") {\n        return fallback(animation);\n      }\n    });\n    return () => {\n      subscriptions.forEach((cancel, i) => {\n        cancel && cancel();\n        this.animations[i].stop();\n      });\n    };\n  }\n  get time() {\n    return this.getAll(\"time\");\n  }\n  set time(time) {\n    this.setAll(\"time\", time);\n  }\n  get speed() {\n    return this.getAll(\"speed\");\n  }\n  set speed(speed) {\n    this.setAll(\"speed\", speed);\n  }\n  get startTime() {\n    return this.getAll(\"startTime\");\n  }\n  get duration() {\n    let max = 0;\n    for (let i = 0; i < this.animations.length; i++) {\n      max = Math.max(max, this.animations[i].duration);\n    }\n    return max;\n  }\n  runAll(methodName) {\n    this.animations.forEach(controls => controls[methodName]());\n  }\n  flatten() {\n    this.runAll(\"flatten\");\n  }\n  play() {\n    this.runAll(\"play\");\n  }\n  pause() {\n    this.runAll(\"pause\");\n  }\n  cancel() {\n    this.runAll(\"cancel\");\n  }\n  complete() {\n    this.runAll(\"complete\");\n  }\n}\n\n/**\n * TODO: This is a temporary class to support the legacy\n * thennable API\n */\nclass GroupPlaybackControls extends BaseGroupPlaybackControls {\n  then(onResolve, onReject) {\n    return Promise.all(this.animations).then(onResolve).catch(onReject);\n  }\n}\nfunction getValueTransition(transition, key) {\n  return transition ? transition[key] || transition[\"default\"] || transition : undefined;\n}\n\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n  let duration = 0;\n  const timeStep = 50;\n  let state = generator.next(duration);\n  while (!state.done && duration < maxGeneratorDuration) {\n    duration += timeStep;\n    state = generator.next(duration);\n  }\n  return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\n/**\n * Create a progress => progress easing function from a generator.\n */\nfunction createGeneratorEasing(options, scale = 100, createGenerator) {\n  const generator = createGenerator({\n    ...options,\n    keyframes: [0, scale]\n  });\n  const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n  return {\n    type: \"keyframes\",\n    ease: progress => {\n      return generator.next(duration * progress).value / scale;\n    },\n    duration: motionUtils.millisecondsToSeconds(duration)\n  };\n}\nfunction isGenerator(type) {\n  return typeof type === \"function\";\n}\nfunction attachTimeline(animation, timeline) {\n  animation.timeline = timeline;\n  animation.onfinish = null;\n}\nclass NativeAnimationControls {\n  constructor(animation) {\n    this.animation = animation;\n  }\n  get duration() {\n    var _a, _b, _c;\n    const durationInMs = ((_b = (_a = this.animation) === null || _a === void 0 ? void 0 : _a.effect) === null || _b === void 0 ? void 0 : _b.getComputedTiming().duration) || ((_c = this.options) === null || _c === void 0 ? void 0 : _c.duration) || 300;\n    return motionUtils.millisecondsToSeconds(Number(durationInMs));\n  }\n  get time() {\n    var _a;\n    if (this.animation) {\n      return motionUtils.millisecondsToSeconds(((_a = this.animation) === null || _a === void 0 ? void 0 : _a.currentTime) || 0);\n    }\n    return 0;\n  }\n  set time(newTime) {\n    if (this.animation) {\n      this.animation.currentTime = motionUtils.secondsToMilliseconds(newTime);\n    }\n  }\n  get speed() {\n    return this.animation ? this.animation.playbackRate : 1;\n  }\n  set speed(newSpeed) {\n    if (this.animation) {\n      this.animation.playbackRate = newSpeed;\n    }\n  }\n  get state() {\n    return this.animation ? this.animation.playState : \"finished\";\n  }\n  get startTime() {\n    return this.animation ? this.animation.startTime : null;\n  }\n  get finished() {\n    return this.animation ? this.animation.finished : Promise.resolve();\n  }\n  play() {\n    this.animation && this.animation.play();\n  }\n  pause() {\n    this.animation && this.animation.pause();\n  }\n  stop() {\n    if (!this.animation || this.state === \"idle\" || this.state === \"finished\") {\n      return;\n    }\n    if (this.animation.commitStyles) {\n      this.animation.commitStyles();\n    }\n    this.cancel();\n  }\n  flatten() {\n    var _a;\n    if (!this.animation) return;\n    (_a = this.animation.effect) === null || _a === void 0 ? void 0 : _a.updateTiming({\n      easing: \"linear\"\n    });\n  }\n  attachTimeline(timeline) {\n    if (this.animation) attachTimeline(this.animation, timeline);\n    return motionUtils.noop;\n  }\n  complete() {\n    this.animation && this.animation.finish();\n  }\n  cancel() {\n    try {\n      this.animation && this.animation.cancel();\n    } catch (e) {}\n  }\n}\nconst isBezierDefinition = easing => Array.isArray(easing) && typeof easing[0] === \"number\";\n\n/**\n * Add the ability for test suites to manually set support flags\n * to better test more environments.\n */\nconst supportsFlags = {\n  linearEasing: undefined\n};\nfunction memoSupports(callback, supportsFlag) {\n  const memoized = motionUtils.memo(callback);\n  return () => {\n    var _a;\n    return (_a = supportsFlags[supportsFlag]) !== null && _a !== void 0 ? _a : memoized();\n  };\n}\nconst supportsLinearEasing = /*@__PURE__*/memoSupports(() => {\n  try {\n    document.createElement(\"div\").animate({\n      opacity: 0\n    }, {\n      easing: \"linear(0, 1)\"\n    });\n  } catch (e) {\n    return false;\n  }\n  return true;\n}, \"linearEasing\");\nconst generateLinearEasing = (easing, duration,\n// as milliseconds\nresolution = 10 // as milliseconds\n) => {\n  let points = \"\";\n  const numPoints = Math.max(Math.round(duration / resolution), 2);\n  for (let i = 0; i < numPoints; i++) {\n    points += easing(motionUtils.progress(0, numPoints - 1, i)) + \", \";\n  }\n  return `linear(${points.substring(0, points.length - 2)})`;\n};\nfunction isWaapiSupportedEasing(easing) {\n  return Boolean(typeof easing === \"function\" && supportsLinearEasing() || !easing || typeof easing === \"string\" && (easing in supportedWaapiEasing || supportsLinearEasing()) || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n  linear: \"linear\",\n  ease: \"ease\",\n  easeIn: \"ease-in\",\n  easeOut: \"ease-out\",\n  easeInOut: \"ease-in-out\",\n  circIn: /*@__PURE__*/cubicBezierAsString([0, 0.65, 0.55, 1]),\n  circOut: /*@__PURE__*/cubicBezierAsString([0.55, 0, 1, 0.45]),\n  backIn: /*@__PURE__*/cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n  backOut: /*@__PURE__*/cubicBezierAsString([0.33, 1.53, 0.69, 0.99])\n};\nfunction mapEasingToNativeEasing(easing, duration) {\n  if (!easing) {\n    return undefined;\n  } else if (typeof easing === \"function\" && supportsLinearEasing()) {\n    return generateLinearEasing(easing, duration);\n  } else if (isBezierDefinition(easing)) {\n    return cubicBezierAsString(easing);\n  } else if (Array.isArray(easing)) {\n    return easing.map(segmentEasing => mapEasingToNativeEasing(segmentEasing, duration) || supportedWaapiEasing.easeOut);\n  } else {\n    return supportedWaapiEasing[easing];\n  }\n}\nconst isDragging = {\n  x: false,\n  y: false\n};\nfunction isDragActive() {\n  return isDragging.x || isDragging.y;\n}\nfunction resolveElements(elementOrSelector, scope, selectorCache) {\n  var _a;\n  if (elementOrSelector instanceof EventTarget) {\n    return [elementOrSelector];\n  } else if (typeof elementOrSelector === \"string\") {\n    let root = document;\n    if (scope) {\n      // TODO: Refactor to utils package\n      // invariant(\n      //     Boolean(scope.current),\n      //     \"Scope provided, but no element detected.\"\n      // )\n      root = scope.current;\n    }\n    const elements = (_a = selectorCache === null || selectorCache === void 0 ? void 0 : selectorCache[elementOrSelector]) !== null && _a !== void 0 ? _a : root.querySelectorAll(elementOrSelector);\n    return elements ? Array.from(elements) : [];\n  }\n  return Array.from(elementOrSelector);\n}\nfunction setupGesture(elementOrSelector, options) {\n  const elements = resolveElements(elementOrSelector);\n  const gestureAbortController = new AbortController();\n  const eventOptions = {\n    passive: true,\n    ...options,\n    signal: gestureAbortController.signal\n  };\n  const cancel = () => gestureAbortController.abort();\n  return [elements, eventOptions, cancel];\n}\nfunction isValidHover(event) {\n  return !(event.pointerType === \"touch\" || isDragActive());\n}\n/**\n * Create a hover gesture. hover() is different to .addEventListener(\"pointerenter\")\n * in that it has an easier syntax, filters out polyfilled touch events, interoperates\n * with drag gestures, and automatically removes the \"pointerennd\" event listener when the hover ends.\n *\n * @public\n */\nfunction hover(elementOrSelector, onHoverStart, options = {}) {\n  const [elements, eventOptions, cancel] = setupGesture(elementOrSelector, options);\n  const onPointerEnter = enterEvent => {\n    if (!isValidHover(enterEvent)) return;\n    const {\n      target\n    } = enterEvent;\n    const onHoverEnd = onHoverStart(target, enterEvent);\n    if (typeof onHoverEnd !== \"function\" || !target) return;\n    const onPointerLeave = leaveEvent => {\n      if (!isValidHover(leaveEvent)) return;\n      onHoverEnd(leaveEvent);\n      target.removeEventListener(\"pointerleave\", onPointerLeave);\n    };\n    target.addEventListener(\"pointerleave\", onPointerLeave, eventOptions);\n  };\n  elements.forEach(element => {\n    element.addEventListener(\"pointerenter\", onPointerEnter, eventOptions);\n  });\n  return cancel;\n}\nfunction capturePointer(event, action) {\n  const actionName = `${action}PointerCapture`;\n  if (event.target instanceof Element && actionName in event.target && event.pointerId !== undefined) {\n    try {\n      event.target[actionName](event.pointerId);\n    } catch (e) {}\n  }\n}\n\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n  if (!child) {\n    return false;\n  } else if (parent === child) {\n    return true;\n  } else {\n    return isNodeOrChild(parent, child.parentElement);\n  }\n};\nconst isPrimaryPointer = event => {\n  if (event.pointerType === \"mouse\") {\n    return typeof event.button !== \"number\" || event.button <= 0;\n  } else {\n    /**\n     * isPrimary is true for all mice buttons, whereas every touch point\n     * is regarded as its own input. So subsequent concurrent touch points\n     * will be false.\n     *\n     * Specifically match against false here as incomplete versions of\n     * PointerEvents in very old browser might have it set as undefined.\n     */\n    return event.isPrimary !== false;\n  }\n};\nconst focusableElements = new Set([\"BUTTON\", \"INPUT\", \"SELECT\", \"TEXTAREA\", \"A\"]);\nfunction isElementKeyboardAccessible(element) {\n  return focusableElements.has(element.tagName) || element.tabIndex !== -1;\n}\nconst isPressing = new WeakSet();\n\n/**\n * Filter out events that are not \"Enter\" keys.\n */\nfunction filterEvents(callback) {\n  return event => {\n    if (event.key !== \"Enter\") return;\n    callback(event);\n  };\n}\nfunction firePointerEvent(target, type) {\n  target.dispatchEvent(new PointerEvent(\"pointer\" + type, {\n    isPrimary: true,\n    bubbles: true\n  }));\n}\nconst enableKeyboardPress = (focusEvent, eventOptions) => {\n  const element = focusEvent.currentTarget;\n  if (!element) return;\n  const handleKeydown = filterEvents(() => {\n    if (isPressing.has(element)) return;\n    firePointerEvent(element, \"down\");\n    const handleKeyup = filterEvents(() => {\n      firePointerEvent(element, \"up\");\n    });\n    const handleBlur = () => firePointerEvent(element, \"cancel\");\n    element.addEventListener(\"keyup\", handleKeyup, eventOptions);\n    element.addEventListener(\"blur\", handleBlur, eventOptions);\n  });\n  element.addEventListener(\"keydown\", handleKeydown, eventOptions);\n  /**\n   * Add an event listener that fires on blur to remove the keydown events.\n   */\n  element.addEventListener(\"blur\", () => element.removeEventListener(\"keydown\", handleKeydown), eventOptions);\n};\n\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction isValidPressEvent(event) {\n  return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\nfunction press(targetOrSelector, onPressStart, options = {}) {\n  const [targets, eventOptions, cancelEvents] = setupGesture(targetOrSelector, options);\n  const startPress = startEvent => {\n    const target = startEvent.currentTarget;\n    if (!target || !isValidPressEvent(startEvent) || isPressing.has(target)) return;\n    isPressing.add(target);\n    capturePointer(startEvent, \"set\");\n    const onPressEnd = onPressStart(target, startEvent);\n    const onPointerEnd = (endEvent, success) => {\n      target.removeEventListener(\"pointerup\", onPointerUp);\n      target.removeEventListener(\"pointercancel\", onPointerCancel);\n      capturePointer(endEvent, \"release\");\n      if (!isValidPressEvent(endEvent) || !isPressing.has(target)) {\n        return;\n      }\n      isPressing.delete(target);\n      if (typeof onPressEnd === \"function\") {\n        onPressEnd(endEvent, {\n          success\n        });\n      }\n    };\n    const onPointerUp = upEvent => {\n      const isOutside = !upEvent.isTrusted ? false : checkOutside(upEvent, target instanceof Element ? target.getBoundingClientRect() : {\n        left: 0,\n        top: 0,\n        right: window.innerWidth,\n        bottom: window.innerHeight\n      });\n      if (isOutside) {\n        onPointerEnd(upEvent, false);\n      } else {\n        onPointerEnd(upEvent, !(target instanceof Element) || isNodeOrChild(target, upEvent.target));\n      }\n    };\n    const onPointerCancel = cancelEvent => {\n      onPointerEnd(cancelEvent, false);\n    };\n    target.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n    target.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    target.addEventListener(\"lostpointercapture\", onPointerCancel, eventOptions);\n  };\n  targets.forEach(target => {\n    target = options.useGlobalTarget ? window : target;\n    let canAddKeyboardAccessibility = false;\n    if (target instanceof HTMLElement) {\n      canAddKeyboardAccessibility = true;\n      if (!isElementKeyboardAccessible(target) && target.getAttribute(\"tabindex\") === null) {\n        target.tabIndex = 0;\n      }\n    }\n    target.addEventListener(\"pointerdown\", startPress, eventOptions);\n    if (canAddKeyboardAccessibility) {\n      target.addEventListener(\"focus\", event => enableKeyboardPress(event, eventOptions), eventOptions);\n    }\n  });\n  return cancelEvents;\n}\nfunction checkOutside(event, rect) {\n  return event.clientX < rect.left || event.clientX > rect.right || event.clientY < rect.top || event.clientY > rect.bottom;\n}\nconst defaultEasing = \"easeOut\";\nfunction applyGeneratorOptions(options) {\n  var _a;\n  if (isGenerator(options.type)) {\n    const generatorOptions = createGeneratorEasing(options, 100, options.type);\n    options.ease = supportsLinearEasing() ? generatorOptions.ease : defaultEasing;\n    options.duration = motionUtils.secondsToMilliseconds(generatorOptions.duration);\n    options.type = \"keyframes\";\n  } else {\n    options.duration = motionUtils.secondsToMilliseconds((_a = options.duration) !== null && _a !== void 0 ? _a : 0.3);\n    options.ease = options.ease || defaultEasing;\n  }\n}\n// TODO: Reuse for NativeAnimation\nfunction convertMotionOptionsToNative(valueName, keyframes, options) {\n  var _a;\n  const nativeKeyframes = {};\n  const nativeOptions = {\n    fill: \"both\",\n    easing: \"linear\",\n    composite: \"replace\"\n  };\n  nativeOptions.delay = motionUtils.secondsToMilliseconds((_a = options.delay) !== null && _a !== void 0 ? _a : 0);\n  applyGeneratorOptions(options);\n  nativeOptions.duration = options.duration;\n  const {\n    ease,\n    times\n  } = options;\n  if (times) nativeKeyframes.offset = times;\n  nativeKeyframes[valueName] = keyframes;\n  const easing = mapEasingToNativeEasing(ease, options.duration);\n  /**\n   * If this is an easing array, apply to keyframes, not animation as a whole\n   */\n  if (Array.isArray(easing)) {\n    nativeKeyframes.easing = easing;\n  } else {\n    nativeOptions.easing = easing;\n  }\n  return {\n    keyframes: nativeKeyframes,\n    options: nativeOptions\n  };\n}\nclass PseudoAnimation extends NativeAnimationControls {\n  constructor(target, pseudoElement, valueName, keyframes, options) {\n    const animationOptions = convertMotionOptionsToNative(valueName, keyframes, options);\n    const animation = target.animate(animationOptions.keyframes, {\n      pseudoElement,\n      ...animationOptions.options\n    });\n    super(animation);\n  }\n}\nfunction chooseLayerType(valueName) {\n  if (valueName === \"layout\") return \"group\";\n  if (valueName === \"enter\" || valueName === \"new\") return \"new\";\n  if (valueName === \"exit\" || valueName === \"old\") return \"old\";\n  return \"group\";\n}\nlet pendingRules = {};\nlet style = null;\nconst css = {\n  set: (selector, values) => {\n    pendingRules[selector] = values;\n  },\n  commit: () => {\n    if (!style) {\n      style = document.createElement(\"style\");\n      style.id = \"motion-view\";\n    }\n    let cssText = \"\";\n    for (const selector in pendingRules) {\n      const rule = pendingRules[selector];\n      cssText += `${selector} {\\n`;\n      for (const [property, value] of Object.entries(rule)) {\n        cssText += `  ${property}: ${value};\\n`;\n      }\n      cssText += \"}\\n\";\n    }\n    style.textContent = cssText;\n    document.head.appendChild(style);\n    pendingRules = {};\n  },\n  remove: () => {\n    if (style && style.parentElement) {\n      style.parentElement.removeChild(style);\n    }\n  }\n};\nfunction getLayerName(pseudoElement) {\n  const match = pseudoElement.match(/::view-transition-(old|new|group|image-pair)\\((.*?)\\)/);\n  if (!match) return null;\n  return {\n    layer: match[2],\n    type: match[1]\n  };\n}\nfunction filterViewAnimations(animation) {\n  var _a;\n  const {\n    effect\n  } = animation;\n  if (!effect) return false;\n  return effect.target === document.documentElement && ((_a = effect.pseudoElement) === null || _a === void 0 ? void 0 : _a.startsWith(\"::view-transition\"));\n}\nfunction getViewAnimations() {\n  return document.getAnimations().filter(filterViewAnimations);\n}\nfunction hasTarget(target, targets) {\n  return targets.has(target) && Object.keys(targets.get(target)).length > 0;\n}\nconst definitionNames = [\"layout\", \"enter\", \"exit\", \"new\", \"old\"];\nfunction startViewAnimation(update, defaultOptions, targets) {\n  if (!document.startViewTransition) {\n    return new Promise(async resolve => {\n      await update();\n      resolve(new BaseGroupPlaybackControls([]));\n    });\n  }\n  // TODO: Go over existing targets and ensure they all have ids\n  /**\n   * If we don't have any animations defined for the root target,\n   * remove it from being captured.\n   */\n  if (!hasTarget(\"root\", targets)) {\n    css.set(\":root\", {\n      \"view-transition-name\": \"none\"\n    });\n  }\n  /**\n   * Set the timing curve to linear for all view transition layers.\n   * This gets baked into the keyframes, which can't be changed\n   * without breaking the generated animation.\n   *\n   * This allows us to set easing via updateTiming - which can be changed.\n   */\n  css.set(\"::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)\", {\n    \"animation-timing-function\": \"linear !important\"\n  });\n  css.commit(); // Write\n  const transition = document.startViewTransition(async () => {\n    await update();\n    // TODO: Go over new targets and ensure they all have ids\n  });\n  transition.finished.finally(() => {\n    css.remove(); // Write\n  });\n  return new Promise(resolve => {\n    transition.ready.then(() => {\n      var _a;\n      const generatedViewAnimations = getViewAnimations();\n      const animations = [];\n      /**\n       * Create animations for our definitions\n       */\n      targets.forEach((definition, target) => {\n        // TODO: If target is not \"root\", resolve elements\n        // and iterate over each\n        for (const key of definitionNames) {\n          if (!definition[key]) continue;\n          const {\n            keyframes,\n            options\n          } = definition[key];\n          for (let [valueName, valueKeyframes] of Object.entries(keyframes)) {\n            if (!valueKeyframes) continue;\n            const valueOptions = {\n              ...getValueTransition(defaultOptions, valueName),\n              ...getValueTransition(options, valueName)\n            };\n            const type = chooseLayerType(key);\n            /**\n             * If this is an opacity animation, and keyframes are not an array,\n             * we need to convert them into an array and set an initial value.\n             */\n            if (valueName === \"opacity\" && !Array.isArray(valueKeyframes)) {\n              const initialValue = type === \"new\" ? 0 : 1;\n              valueKeyframes = [initialValue, valueKeyframes];\n            }\n            /**\n             * Resolve stagger function if provided.\n             */\n            if (typeof valueOptions.delay === \"function\") {\n              valueOptions.delay = valueOptions.delay(0, 1);\n            }\n            const animation = new PseudoAnimation(document.documentElement, `::view-transition-${type}(${target})`, valueName, valueKeyframes, valueOptions);\n            animations.push(animation);\n          }\n        }\n      });\n      /**\n       * Handle browser generated animations\n       */\n      for (const animation of generatedViewAnimations) {\n        if (animation.playState === \"finished\") continue;\n        const {\n          effect\n        } = animation;\n        if (!effect || !(effect instanceof KeyframeEffect)) continue;\n        const {\n          pseudoElement\n        } = effect;\n        if (!pseudoElement) continue;\n        const name = getLayerName(pseudoElement);\n        if (!name) continue;\n        const targetDefinition = targets.get(name.layer);\n        if (!targetDefinition) {\n          /**\n           * If transition name is group then update the timing of the animation\n           * whereas if it's old or new then we could possibly replace it using\n           * the above method.\n           */\n          const transitionName = name.type === \"group\" ? \"layout\" : \"\";\n          const animationTransition = {\n            ...getValueTransition(defaultOptions, transitionName)\n          };\n          applyGeneratorOptions(animationTransition);\n          const easing = mapEasingToNativeEasing(animationTransition.ease, animationTransition.duration);\n          effect.updateTiming({\n            delay: motionUtils.secondsToMilliseconds((_a = animationTransition.delay) !== null && _a !== void 0 ? _a : 0),\n            duration: animationTransition.duration,\n            easing\n          });\n          animations.push(new NativeAnimationControls(animation));\n        } else if (hasOpacity(targetDefinition, \"enter\") && hasOpacity(targetDefinition, \"exit\") && effect.getKeyframes().some(keyframe => keyframe.mixBlendMode)) {\n          animations.push(new NativeAnimationControls(animation));\n        } else {\n          animation.cancel();\n        }\n      }\n      resolve(new BaseGroupPlaybackControls(animations));\n    });\n  });\n}\nfunction hasOpacity(target, key) {\n  var _a;\n  return (_a = target === null || target === void 0 ? void 0 : target[key]) === null || _a === void 0 ? void 0 : _a.keyframes.opacity;\n}\n\n/**\n * TODO:\n * - Create view transition on next tick\n * - Replace animations with Motion animations\n * - Return GroupAnimation on next tick\n */\nclass ViewTransitionBuilder {\n  constructor(update, options = {}) {\n    this.currentTarget = \"root\";\n    this.targets = new Map();\n    this.notifyReady = motionUtils.noop;\n    this.readyPromise = new Promise(resolve => {\n      this.notifyReady = resolve;\n    });\n    queueMicrotask(() => {\n      startViewAnimation(update, options, this.targets).then(animation => this.notifyReady(animation));\n    });\n  }\n  get(selector) {\n    this.currentTarget = selector;\n    return this;\n  }\n  layout(keyframes, options) {\n    this.updateTarget(\"layout\", keyframes, options);\n    return this;\n  }\n  new(keyframes, options) {\n    this.updateTarget(\"new\", keyframes, options);\n    return this;\n  }\n  old(keyframes, options) {\n    this.updateTarget(\"old\", keyframes, options);\n    return this;\n  }\n  enter(keyframes, options) {\n    this.updateTarget(\"enter\", keyframes, options);\n    return this;\n  }\n  exit(keyframes, options) {\n    this.updateTarget(\"exit\", keyframes, options);\n    return this;\n  }\n  crossfade(options) {\n    this.updateTarget(\"enter\", {\n      opacity: 1\n    }, options);\n    this.updateTarget(\"exit\", {\n      opacity: 0\n    }, options);\n    return this;\n  }\n  updateTarget(target, keyframes, options = {}) {\n    const {\n      currentTarget,\n      targets\n    } = this;\n    if (!targets.has(currentTarget)) {\n      targets.set(currentTarget, {});\n    }\n    const targetData = targets.get(currentTarget);\n    targetData[target] = {\n      keyframes,\n      options\n    };\n  }\n  then(resolve, reject) {\n    return this.readyPromise.then(resolve, reject);\n  }\n}\nfunction view(update, defaultOptions = {}) {\n  return new ViewTransitionBuilder(update, defaultOptions);\n}\nfunction setDragLock(axis) {\n  if (axis === \"x\" || axis === \"y\") {\n    if (isDragging[axis]) {\n      return null;\n    } else {\n      isDragging[axis] = true;\n      return () => {\n        isDragging[axis] = false;\n      };\n    }\n  } else {\n    if (isDragging.x || isDragging.y) {\n      return null;\n    } else {\n      isDragging.x = isDragging.y = true;\n      return () => {\n        isDragging.x = isDragging.y = false;\n      };\n    }\n  }\n}\nexports.GroupPlaybackControls = GroupPlaybackControls;\nexports.NativeAnimationControls = NativeAnimationControls;\nexports.ViewTransitionBuilder = ViewTransitionBuilder;\nexports.attachTimeline = attachTimeline;\nexports.calcGeneratorDuration = calcGeneratorDuration;\nexports.capturePointer = capturePointer;\nexports.createGeneratorEasing = createGeneratorEasing;\nexports.cubicBezierAsString = cubicBezierAsString;\nexports.generateLinearEasing = generateLinearEasing;\nexports.getValueTransition = getValueTransition;\nexports.hover = hover;\nexports.isBezierDefinition = isBezierDefinition;\nexports.isDragActive = isDragActive;\nexports.isDragging = isDragging;\nexports.isGenerator = isGenerator;\nexports.isNodeOrChild = isNodeOrChild;\nexports.isPrimaryPointer = isPrimaryPointer;\nexports.isWaapiSupportedEasing = isWaapiSupportedEasing;\nexports.mapEasingToNativeEasing = mapEasingToNativeEasing;\nexports.maxGeneratorDuration = maxGeneratorDuration;\nexports.press = press;\nexports.resolveElements = resolveElements;\nexports.setDragLock = setDragLock;\nexports.supportedWaapiEasing = supportedWaapiEasing;\nexports.supportsFlags = supportsFlags;\nexports.supportsLinearEasing = supportsLinearEasing;\nexports.supportsScrollTimeline = supportsScrollTimeline;\nexports.view = view;","map":null,"metadata":{},"sourceType":"script"}