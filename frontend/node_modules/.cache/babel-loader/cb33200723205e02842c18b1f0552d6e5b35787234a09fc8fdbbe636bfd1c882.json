{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Khushi\\\\Desktop\\\\INVICTUS-25\\\\frontend\\\\src\\\\components\\\\Chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const predefinedQuestions = [\"How do I search for research papers?\", \"Can I collaborate with other researchers?\", \"What is ResearchCollab?\"];\n  const handleSend = async () => {\n    if (input.trim()) {\n      setIsLoading(true);\n      setMessages([...messages, {\n        text: input,\n        sender: \"user\"\n      }]);\n      try {\n        console.log(\"Sending request to backend...\");\n        const response = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            messages: [{\n              role: \"system\",\n              content: \"You are a helpful assistant for the ResearchCollab platform.\"\n            }, {\n              role: \"user\",\n              content: input\n            }]\n          })\n        });\n        console.log(\"Response received:\", response);\n        const botResponse = await response.json();\n        console.log(\"Bot response:\", botResponse);\n        setMessages([...messages, {\n          text: input,\n          sender: \"user\"\n        }, {\n          text: botResponse,\n          sender: \"bot\"\n        }]);\n      } catch (error) {\n        console.error(\"Error fetching response:\", error);\n        setMessages([...messages, {\n          text: input,\n          sender: \"user\"\n        }, {\n          text: \"Sorry, something went wrong. Please try again.\",\n          sender: \"bot\"\n        }]);\n      } finally {\n        setIsLoading(false);\n        setInput(\"\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ResearchBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setMessages([]),\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: \"Typing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predefined-questions\",\n      children: predefinedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setInput(question),\n        children: question\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: e => e.key === \"Enter\" && handleSend()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"OjPvdQps2GsUGE4SUl5r1IcLShE=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","predefinedQuestions","handleSend","trim","text","sender","console","log","response","fetch","method","headers","body","JSON","stringify","role","content","botResponse","json","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","message","index","question","type","placeholder","value","onChange","e","target","onKeyPress","key","_c","$RefreshReg$"],"sources":["C:/Users/Khushi/Desktop/INVICTUS-25/frontend/src/components/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Chatbot.css\";\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const predefinedQuestions = [\r\n    \"How do I search for research papers?\",\r\n    \"Can I collaborate with other researchers?\",\r\n    \"What is ResearchCollab?\",\r\n  ];\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim()) {\r\n      setIsLoading(true);\r\n      setMessages([...messages, { text: input, sender: \"user\" }]);\r\n\r\n      try {\r\n        console.log(\"Sending request to backend...\");\r\n        const response = await fetch(\"http://localhost:5000/chat\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            messages: [\r\n              { role: \"system\", content: \"You are a helpful assistant for the ResearchCollab platform.\" },\r\n              { role: \"user\", content: input },\r\n            ],\r\n          }),\r\n        });\r\n        console.log(\"Response received:\", response);\r\n        const botResponse = await response.json();\r\n        console.log(\"Bot response:\", botResponse);\r\n        setMessages([...messages, { text: input, sender: \"user\" }, { text: botResponse, sender: \"bot\" }]);\r\n      } catch (error) {\r\n        console.error(\"Error fetching response:\", error);\r\n        setMessages([...messages, { text: input, sender: \"user\" }, { text: \"Sorry, something went wrong. Please try again.\", sender: \"bot\" }]);\r\n      } finally {\r\n        setIsLoading(false);\r\n        setInput(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot\">\r\n      <div className=\"chatbot-header\">\r\n        <h3>ResearchBot</h3>\r\n        <button onClick={() => setMessages([])}>Clear</button>\r\n      </div>\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {isLoading && <div className=\"message bot\">Typing...</div>}\r\n      </div>\r\n      <div className=\"predefined-questions\">\r\n        {predefinedQuestions.map((question, index) => (\r\n          <button key={index} onClick={() => setInput(question)}>\r\n            {question}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type a message...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={(e) => e.key === \"Enter\" && handleSend()}\r\n        />\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}